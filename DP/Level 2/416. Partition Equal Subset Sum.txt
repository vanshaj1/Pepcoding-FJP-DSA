416. Partition Equal Subset Sum
Medium

8681

139

Add to List

Share
Given a non-empty array nums containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.

 

Example 1:

Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].
Example 2:

Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.
 

Constraints:

1 <= nums.length <= 200
1 <= nums[i] <= 100



``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````



class Solution {
    public boolean canPartition(int[] nums) {
        int sum = 0;
        for(int i=0;i<nums.length;i++){
            sum += nums[i];
        }
        if(sum % 2 != 0){
            return false;
        }
        
        int tar = sum / 2;
        boolean[][] dp = new boolean[nums.length+1][tar+1];
        
        for(int i=0;i<dp.length;i++){
            for(int j=0;j<dp[0].length;j++){
                if(i == 0 && j == 0){
                    dp[i][j] = true;
                }else if(i == 0){
                    dp[i][j] = false;
                }else if(j == 0){
                    dp[i][j] = true;
                }else{
                    if(dp[i - 1][j] == true){
                        dp[i][j] = true;
                    }else{
                        int curr = nums[i-1];
                        if(j >= curr && dp[i - 1][j - curr] == true){
                            dp[i][j] = true;
                        }else{
                            dp[i][j] = false;
                        }
                    }
                }
            }
        }
        return dp[nums.length][tar];
    }
}