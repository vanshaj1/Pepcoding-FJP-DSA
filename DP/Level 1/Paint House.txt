Paint House
Easy

1. You are given a number n, representing the number of houses.
2. In the next n rows, you are given 3 space separated numbers representing the cost of painting nth house with red or blue or green color.
3. You are required to calculate and print the minimum cost of painting all houses without painting any consecutive house with same color.

Constraints
1 = n = 1000
0 = n1red, n1blue, .. = 1000

Format
Input
A number n
n1red n1blue n1green
n2red n2blue n2green
.. n number of elements

Output
A number representing the minimum cost of painting all houses without painting any consecutive house with same color.

Example
Sample Input

4
1 5 7
5 8 4
3 2 9
1 2 4

Sample Output
8




`````````````````````````````````Code```````````````````````````````

Approach 1

import java.io.*;
import java.util.*;

public class Main {
   public static int rec(int idx,int n,int prev,int[][] cost){
       if(idx == n){
           return 0;
       }
       int ans = Integer.MAX_VALUE;
       if(prev != 0){
          ans = Math.min(ans,rec(idx+1,n,0,cost) + cost[idx][0]);
       }
       if(prev != 1){
          ans = Math.min(ans,rec(idx+1,n,1,cost) + cost[idx][1]);
       }
       if(prev != 2){
          ans = Math.min(ans,rec(idx+1,n,2,cost) +cost[idx][2]);
       }
       return ans;

   }
   public static int memo(int idx,int n,int prev,int[][] cost,int[] dp){
       if(idx == n){
           return dp[idx] = 0;
       }
       if(dp[idx] != -1){
           return dp[idx];
       }
       int ans = Integer.MAX_VALUE;
       if(prev != 0){
          ans = Math.min(ans,rec(idx+1,n,0,cost) + cost[idx][0]);
       }
       if(prev != 1){
          ans = Math.min(ans,rec(idx+1,n,1,cost) + cost[idx][1]);
       }
       if(prev != 2){
          ans = Math.min(ans,rec(idx+1,n,2,cost) +cost[idx][2]);
       }
       return dp[idx] = ans;

   }
    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int[][] cost = new int[n][3];
        for(int i=0;i<n;i++){
            for(int j=0;j<3;j++){
                cost[i][j] = scn.nextInt();
            }           
        }
        // System.out.println(rec(0,n,-1,cost));
        int[] dp = new int[n+1];
        Arrays.fill(dp,-1);
        System.out.println(memo(0,n,-1,cost,dp));
    }
}






Approach 2


import java.io.*;
import java.util.*;

public class Main {
   public static int rec(int idx,int n,int prev,int[][] cost){
       if(idx == n){
           return 0;
       }
       int ans = Integer.MAX_VALUE;
       if(prev != 0){
          ans = Math.min(ans,rec(idx+1,n,0,cost) + cost[idx][0]);
       }
       if(prev != 1){
          ans = Math.min(ans,rec(idx+1,n,1,cost) + cost[idx][1]);
       }
       if(prev != 2){
          ans = Math.min(ans,rec(idx+1,n,2,cost) +cost[idx][2]);
       }
       return ans;

   }
//    public static int memo(int idx,int n,int prev,int[][] cost,int[] dp){
//        if(idx == n){
//            return dp[idx] = 0;
//        }
//        if(dp[idx] != -1){
//            return dp[idx];
//        }
//        int ans = Integer.MAX_VALUE;
//        if(prev != 0){
//           ans = Math.min(ans,memo(idx+1,n,0,cost,dp) + cost[idx][0]);
//        }
//        if(prev != 1){
//           ans = Math.min(ans,memo(idx+1,n,1,cost,dp) + cost[idx][1]);
//        }
//        if(prev != 2){
//           ans = Math.min(ans,memo(idx+1,n,2,cost,dp) + cost[idx][2]);
//        }
//        return dp[idx] = ans;

//    }
    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int[][] cost = new int[n][3];
        for(int i=0;i<n;i++){
            for(int j=0;j<3;j++){
                cost[i][j] = scn.nextInt();
            }           
        }
        // System.out.println(rec(0,n,-1,cost));
        int rcost = 0,bcost = 0,gcost = 0;
        for(int i=0;i<n;i++){
            int nr = Math.min(bcost,gcost) + cost[i][0];
            int nb = Math.min(rcost,gcost) + cost[i][1];
            int ng = Math.min(rcost,bcost) + cost[i][2];
            rcost = nr;
            bcost = nb;
            gcost = ng;
        }
        System.out.println(Math.min(rcost,Math.min(bcost,gcost)));
    }
}