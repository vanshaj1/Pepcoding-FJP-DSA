Partition Into Subsets
Easy

1. You are given a number n, representing the number of elements.
2. You are given a number k, representing the number of subsets.
3. You are required to print the number of ways in which these elements can be partitioned in k non-empty subsets.
E.g.
For n = 4 and k = 3 total ways is 6
12-3-4
1-23-4
13-2-4
14-2-3
1-24-3
1-2-34

Constraints
0 = n = 20
0 = k = n

Format
Input
A number n
A number k

Output
A number representing the number of ways in which these elements can be partitioned in k non-empty subsets.

Example
Sample Input

4
3

Sample Output
6





`````````````````````````````````Code````````````````````````````````


Approach 1

import java.io.*;
import java.util.*;

public class Main {    
    public static long partitionKSubset(int n, int k) {
        // write your code here
        if(n == k){
            return 1;
        }
        if(k == 1){
            return 1;
        }
        long ans = 0;
        ans += k * partitionKSubset(n-1,k);
        ans += partitionKSubset(n-1,k-1);
        return ans;
    }
    public static long memo(int n, int k,long[][] dp) {
        // write your code here
        if(n == k){
            return dp[n][k] = 1;
        }
        if(k == 1){
            return dp[n][k] = 1;
        }
        if(dp[n][k] != 0){
            return dp[n][k];
        }
        long ans = 0;
        ans += k * partitionKSubset(n-1,k);
        ans += partitionKSubset(n-1,k-1);
        return dp[n][k] = ans;
    }
    
    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int k = scn.nextInt();
        
        // long res = partitionKSubset(n, k);
        long[][] dp = new long[n+1][k+1];
        long res = memo(n,k,dp);
        System.out.println(res);
    }
}





Approach 2

import java.io.*;
import java.util.*;

public class Main {    
    public static long partitionKSubset(int n, int k) {
        // write your code here
        if(n == k){
            return 1;
        }
        if(k == 1){
            return 1;
        }
        long ans = 0;
        ans += k * partitionKSubset(n-1,k);
        ans += partitionKSubset(n-1,k-1);
        return ans;
    }
    public static long memo(int n, int k,long[][] dp) {
        // write your code here
        if(n == k){
            return dp[n][k] = 1;
        }
        if(k == 1){
            return dp[n][k] = 1;
        }
        if(dp[n][k] != 0){
            return dp[n][k];
        }
        long ans = 0;
        ans += k * partitionKSubset(n-1,k);
        ans += partitionKSubset(n-1,k-1);
        return dp[n][k] = ans;
    }
    
    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int k = scn.nextInt();
        
        // long res = partitionKSubset(n, k);
        long[][] dp = new long[n+1][k+1];
        // long res = memo(n,k,dp);
        // System.out.println(res);

        for(int i=0;i<=n;i++){
            for(int j=0;j<=k;j++){
                if(i == 0 || j == 0 || j > n){
                    dp[i][j] = 0;
                    continue;
                }
                 if(i == j || j == 1){
                    dp[i][j] = 1;
                    continue;
                }
                long ans = 0;
                if(i-1 >= 0 && j-1 >= 0){
                    ans += j * dp[i-1][j];
                }
                if(i-1 >= 0 && j-1 >= 0){
                      ans += dp[i-1][j-1];
                }
                
                dp[i][j] = ans; 
            }
        }
        System.out.println(dp[n][k]);


    }
}