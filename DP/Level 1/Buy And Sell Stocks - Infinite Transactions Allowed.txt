Buy And Sell Stocks - Infinite Transactions Allowed
Easy

1. You are given a number n, representing the number of days.
2. You are given n numbers, where ith number represents price of stock on ith day.
3. You are required to print the maximum profit you can make if you are allowed infinite transactions.
Note - There can be no overlapping transaction. One transaction needs to be closed (a buy followed by a sell) before opening another transaction (another buy)

Constraints
0 = n = 20
0 = n1, n2, .. = 10

Format
Input
A number n
.. n more elements

Output
A number representing the maximum profit you can make if you are allowed infinite transactions.

Example
Sample Input

9
11
6
7
19
4
1
6
18
4

Sample Output
30





`````````````````````````````````Code```````````````````````````````


Approach 1

import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int[] price = new int[n];
        for(int i=0;i<n;i++){
            price[i] = scn.nextInt();
        }
        int buyPrice = price[0];
        int sellPrice = price[0];
        int maxProfit = 0;
        for(int i=1;i<n;i++){
            if(price[i] >= sellPrice){
                sellPrice = price[i];
            }
            else if(price[i] < sellPrice){
               int profit = sellPrice - buyPrice;
               maxProfit += profit;
               buyPrice = price[i];
               sellPrice = price[i];
            }
            if(i == n-1){
               int profit = sellPrice - buyPrice;
               maxProfit += profit;
            }

        }
        System.out.println(maxProfit);
    }

}






Approach 2


import java.io.*;
import java.util.*;

public class Main {
    public static int rec(int idx,int flag,int[] prices){
        if(idx == prices.length){
            return 0;
        }
        if(flag == 0){
            int p1 = -prices[idx] + rec(idx+1,1,prices);
            int p2 = 0 + rec(idx+1,0,prices);
            return Math.max(p1,p2);
        }else{
            int p1 = prices[idx] + rec(idx+1,0,prices);
            int p2 = rec(idx+1,1,prices);
            return Math.max(p1,p2);
        }
    }
     public static int memo(int idx,int flag,int[] prices,int[][] dp){
        if(idx == prices.length){
            return dp[idx][flag] = 0;
        }
        if(dp[idx][flag] != 0){
            return dp[idx][flag];
        }
        if(flag == 0){
            int p1 = -prices[idx] + rec(idx+1,1,prices);
            int p2 = 0 + rec(idx+1,0,prices);
            return dp[idx][flag] = Math.max(p1,p2);
        }else{
            int p1 = prices[idx] + rec(idx+1,0,prices);
            int p2 = rec(idx+1,1,prices);
            return dp[idx][flag] = Math.max(p1,p2);
        }
    }
    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int[] price = new int[n];
        for(int i=0;i<n;i++){
            price[i] = scn.nextInt();
        }
        // int buyPrice = price[0];
        // int sellPrice = price[0];
        // int maxProfit = 0;
        // for(int i=1;i<n;i++){
        //     if(price[i] >= sellPrice){
        //         sellPrice = price[i];
        //     }
        //     else if(price[i] < sellPrice){
        //        int profit = sellPrice - buyPrice;
        //        maxProfit += profit;
        //        buyPrice = price[i];
        //        sellPrice = price[i];
        //     }
        //     if(i == n-1){
        //        int profit = sellPrice - buyPrice;
        //        maxProfit += profit;
        //     }

        // }
        // System.out.println(maxProfit);
        // System.out.println(rec(0,0,price));
        int[][] dp = new int[n+1][2];
        // System.out.println(memo(0,0,price,dp));
        for(int idx=n;idx>=0;idx--){
            for(int flag = 0;flag<2;flag++){
                if(idx == price.length){
                    dp[idx][flag] = 0;
                    continue;
                }
                if(flag == 0){
                    int p1 = -price[idx] + dp[idx+1][1];
                    int p2 = 0 + dp[idx+1][0];
                    dp[idx][flag] = Math.max(p1,p2);
                }else{
                    int p1 = price[idx] + dp[idx+1][0];
                    int p2 = dp[idx+1][1];
                    dp[idx][flag] = Math.max(p1,p2);
                }

            }
        }
        System.out.println(dp[0][0]);
    }

}