Climb Stairs With Variable Jumps
Easy

1. You are given a number n, representing the number of stairs in a staircase.
2. You are on the 0th step and are required to climb to the top.
3. You are given n numbers, where ith element's value represents - till how far from the step you 
     could jump to in a single move.  
     You can of course jump fewer number of steps in the move.
4. You are required to print the number of different paths via which you can climb to the top.

Constraints
0 = n = 20
0 = n1, n2, .. = 20

Format
Input
A number n
.. n more elements

Output
A number representing the number of ways to climb the stairs from 0 to top.

Example
Sample Input

10
3
3
0
2
1
2
4
2
0
0

Sample Output
5




````````````````````````````````Code````````````````````````````````


Approach 1


import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int[] jumps = new int[n];
        for(int i=0;i < n;i++) {
            jumps[i] = scn.nextInt();
        }
        int[] dp = new int[n+1];
        for(int i=n;i>=0;i--){
               if(i == n){
                   dp[i] = 1;
                   continue;
               } 
               int ans=0;
               for(int j=1;j<=jumps[i];j++){
                   if(i + j <= n){
                       ans += dp[i + j];
                   }
                   
               }
               dp[i] = ans;
        }
        System.out.println(dp[0]);
    }

}


Approach 2


import java.io.*;
import java.util.*;

public class Main {
    public static int ClimbByRecursion(int idx,int n , int[] jumps){
        if(idx == n){
            return 1;
        }
        int ans = 0;
        for(int i=1;i<=jumps[idx];i++){
            if(idx + i <= n){
                ans += ClimbByRecursion(idx + i,n,jumps);
            }
        }
        return ans;
    }
    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int[] jumps = new int[n];
        for(int i=0;i < n;i++) {
            jumps[i] = scn.nextInt();
        }
        System.out.println(ClimbByRecursion(0,n,jumps));
        // int[] dp = new int[n+1];
        // for(int i=n;i>=0;i--){
        //        if(i == n){
        //            dp[i] = 1;
        //            continue;
        //        } 
        //        int ans=0;
        //        for(int j=1;j<=jumps[i];j++){
        //            if(i + j <= n){
        //                ans += dp[i + j];
        //            }
                   
        //        }
        //        dp[i] = ans;
        // }
        // System.out.println(dp[0]);
    }

}




Approach 3

import java.io.*;
import java.util.*;

public class Main {
    // public static int ClimbByRecursion(int idx,int n , int[] jumps){
    //     if(idx == n){
    //         return 1;
    //     }
    //     int ans = 0;
    //     for(int i=1;i<=jumps[idx];i++){
    //         if(idx + i <= n){
    //             ans += ClimbByRecursion(idx + i,n,jumps);
    //         }
    //     }
    //     return ans;
    // }
    public static int ClimbByMemo(int idx,int n , int[] jumps,int[] dp){
        if(idx == n){
            return dp[idx] = 1;
        }
        if(dp[idx] != -1){
            return dp[idx];
        }
        int ans = 0;
        for(int i=1;i<=jumps[idx];i++){
            if(idx + i <= n){
                ans += ClimbByMemo(idx + i,n,jumps,dp);
            }
        }
        return dp[idx] = ans;
    }
    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int[] jumps = new int[n];
        for(int i=0;i < n;i++) {
            jumps[i] = scn.nextInt();
        }
        int[] dp = new int[n+1];
        Arrays.fill(dp,-1);
        System.out.println(ClimbByMemo(0,n,jumps,dp));
        // System.out.println(ClimbByRecursion(0,n,jumps));
        // int[] dp = new int[n+1];
        // for(int i=n;i>=0;i--){
        //        if(i == n){
        //            dp[i] = 1;
        //            continue;
        //        } 
        //        int ans=0;
        //        for(int j=1;j<=jumps[i];j++){
        //            if(i + j <= n){
        //                ans += dp[i + j];
        //            }
                   
        //        }
        //        dp[i] = ans;
        // }
        // System.out.println(dp[0]);
    }

}





Approach 4

import java.io.*;
import java.util.*;

public class Main {
    // public static int ClimbByRecursion(int idx,int n , int[] jumps){
    //     if(idx == n){
    //         return 1;
    //     }
    //     int ans = 0;
    //     for(int i=1;i<=jumps[idx];i++){
    //         if(idx + i <= n){
    //             ans += ClimbByRecursion(idx + i,n,jumps);
    //         }
    //     }
    //     return ans;
    // }
    // public static int ClimbByMemo(int idx,int n , int[] jumps,int[] dp){
    //     if(idx == n){
    //         return dp[idx] = 1;
    //     }
    //     if(dp[idx] != -1){
    //         return dp[idx];
    //     }
    //     int ans = 0;
    //     for(int i=1;i<=jumps[idx];i++){
    //         if(idx + i <= n){
    //             ans += ClimbByMemo(idx + i,n,jumps,dp);
    //         }
    //     }
    //     return dp[idx] = ans;
    // }
    public static int rec(int idx , int[] jumps,int n){
        if(idx == n){
            return 1;
        }
        if(idx > n){
            return 0;
        }
        int ans = 0;
        for(int i=1;i<=jumps[idx];i++){
            ans += rec(idx + i,jumps,n);
        }
        return ans;
    }
    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int[] jumps = new int[n];
        for(int i=0;i < n;i++) {
            jumps[i] = scn.nextInt();
        }
        // int[] dp = new int[n+1];
        // Arrays.fill(dp,-1);
        // System.out.println(ClimbByMemo(0,n,jumps,dp));
        // System.out.println(ClimbByRecursion(0,n,jumps));
        // int[] dp = new int[n+1];
        // for(int i=n;i>=0;i--){
        //        if(i == n){
        //            dp[i] = 1;
        //            continue;
        //        } 
        //        int ans=0;
        //        for(int j=1;j<=jumps[i];j++){
        //            if(i + j <= n){
        //                ans += dp[i + j];
        //            }
                   
        //        }
        //        dp[i] = ans;
        // }
        // System.out.println(dp[0]);
        System.out.println(rec(0,jumps,n));
    }

}

