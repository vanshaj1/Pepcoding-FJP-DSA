Buy And Sell Stocks - One Transaction Allowed
Easy

1. You are given a number n, representing the number of days.
2. You are given n numbers, where ith number represents price of stock on ith day.
3. You are required to print the maximum profit you can make if you are allowed a single transaction.

Constraints
0 = n = 20
0 = n1, n2, .. = 10

Format
Input
A number n
.. n more elements

Output
A number representing the maximum profit you can make if you are allowed a single transaction.

Example
Sample Input

9
11
6
7
19
4
1
6
18
4

Sample Output
17





```````````````````````````````Code````````````````````````````````````


import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int[] price = new int[n];
        for(int i=0;i<n;i++){
          price[i] = scn.nextInt();
        }
        // int[] profit = new int[n];
        // for(int i=0;i<n;i++){
        //     int buy = price[i];
        //     int maxProfit = Integer.MIN_VALUE;
        //     for(int j=i+1;j<n;j++){
        //          if(price[j] > buy){
        //             maxProfit = Math.max(maxProfit,price[j] - buy);
        //          }
        //     }
        //     profit[i] = maxProfit;
        // }
        // int maxProfit = Integer.MIN_VALUE;
        // for(int i:profit){
        //     maxProfit = Math.max(maxProfit,i);
        // }
        // System.out.println(maxProfit);
        int ans = 0;
        int minTillNow = price[0];
        for(int i=1;i<n;i++){
            if(minTillNow > price[i]){
                minTillNow = price[i];
            }
            int profit = price[i] - minTillNow;
            ans = Math.max(profit,ans);
        }
        System.out.println(ans);
    }

}