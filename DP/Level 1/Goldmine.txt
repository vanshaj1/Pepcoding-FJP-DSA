Goldmine
Easy

1. You are given a number n, representing the number of rows.
2. You are given a number m, representing the number of columns.
3. You are given nm numbers, representing elements of 2d array a, which represents a gold mine.
4. You are standing in front of left wall and are supposed to dig to the right wall. You can start from 
     any row in the left wall.
5. You are allowed to move 1 cell right-up (d1), 1 cell right (d2) or 1 cell right-down(d3).

goldmine

6. Each cell has a value that is the amount of gold available in the cell.
7. You are required to identify the maximum amount of gold that can be dug out from the mine.

Constraints
1 = n = 10^2
1 = m = 10^2
0 = e1, e2, .. n  m elements = 1000

Format
Input
A number n
A number m
e11
e12..
e21
e22..
.. n  m number of elements

Output
An integer representing Maximum gold available.

Example
Sample Input

6
6
0 1 4 2 8 2
4 3 6 5 0 4
1 2 4 1 4 6
2 0 7 3 2 2
3 1 5 9 2 4
2 7 0 8 5 1

Sample Output
33





`````````````````````````````````Code```````````````````````````````

Approach 1


import java.io.*;
import java.util.*;

public class Main {
    public static int MineTheGold(int row,int col,int[][] gold,int n,int m){
        if(col == m || row == n || row < 0){
            return 0;
        }
        int d1 = 0,d2 = 0,d3 = 0,ans = 0;

        d1 = MineTheGold(row-1,col+1,gold,n,m);
        d2 = MineTheGold(row,col+1,gold,n,m);
        d3 = MineTheGold(row+1,col+1,gold,n,m);

        ans = Math.max(Math.max(d1,d2),d3);
        return ans + gold[row][col];
    }
    public static int memo(int row,int col,int[][] gold,int n,int m,int[][] dp){
         if(row < 0){
             return 0;
         } 
        if(col == m || row == n){
            return dp[row][col] = 0;
        }
        if(dp[row][col] != -1){
            return dp[row][col];
        }
        int d1 = 0,d2 = 0,d3 = 0,ans = 0;

        d1 = memo(row-1,col+1,gold,n,m,dp);
        d2 = memo(row,col+1,gold,n,m,dp);
        d3 = memo(row+1,col+1,gold,n,m,dp);

        ans = Math.max(Math.max(d1,d2),d3);
        return dp[row][col] = ans + gold[row][col];
    }
    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int m = scn.nextInt();
        int[][] gold = new int[n][m];
        for(int i=0;i<gold.length;i++){
            for(int j=0;j<gold[i].length;j++){
                gold[i][j] = scn.nextInt();
            }
        }
        // int ans = Integer.MIN_VALUE;
        // for(int i=0;i<n;i++){
        //     ans = Math.max(ans,MineTheGold(i,0,gold,n,m));
        // }
        // System.out.println(ans);
        int[][] dp = new int[n+1][m+1];
        for(int i=0;i<n;i++){
            Arrays.fill(dp[i],-1);
        }
        int ans = Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
            ans = Math.max(ans,memo(i,0,gold,n,m,dp));
        }
        System.out.println(ans);


    }

}




Appraoch 2


import java.io.*;
import java.util.*;

public class Main {
    public static int MineTheGold(int row,int col,int[][] gold,int n,int m){
        if(col == m || row == n || row < 0){
            return 0;
        }
        int d1 = 0,d2 = 0,d3 = 0,ans = 0;

        d1 = MineTheGold(row-1,col+1,gold,n,m);
        d2 = MineTheGold(row,col+1,gold,n,m);
        d3 = MineTheGold(row+1,col+1,gold,n,m);

        ans = Math.max(Math.max(d1,d2),d3);
        return ans + gold[row][col];
    }
    public static int memo(int row,int col,int[][] gold,int n,int m,int[][] dp){
        if(row < 0){
            return 0;
        } 
        if(col == m || row == n){
            return dp[row][col] = 0;
        }
        if(dp[row][col] != -1){
            return dp[row][col];
        }
        int d1 = 0,d2 = 0,d3 = 0,ans = 0;

        d1 = memo(row-1,col+1,gold,n,m,dp);
        d2 = memo(row,col+1,gold,n,m,dp);
        d3 = memo(row+1,col+1,gold,n,m,dp);

        ans = Math.max(Math.max(d1,d2),d3);
        return dp[row][col] = ans + gold[row][col];
    }
    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int m = scn.nextInt();
        int[][] gold = new int[n][m];
        for(int i=0;i<gold.length;i++){
            for(int j=0;j<gold[i].length;j++){
                gold[i][j] = scn.nextInt();
            }
        }
        // int ans = Integer.MIN_VALUE;
        // for(int i=0;i<n;i++){
        //     ans = Math.max(ans,MineTheGold(i,0,gold,n,m));
        // }
        // System.out.println(ans);
        // int[][] dp = new int[n+1][m+1];
        // for(int i=0;i<n;i++){
        //     Arrays.fill(dp[i],-1);
        // }
        // int ans = Integer.MIN_VALUE;
        // for(int i=0;i<n;i++){
        //     ans = Math.max(ans,memo(i,0,gold,n,m,dp));
        // }
        // System.out.println(ans);
        int[][] dp = new int[n][m];
        for(int col = m-1;col >= 0;col--){
            for(int row = 0;row<n;row++){
                if(col == m-1){
                    dp[row][col] = gold[row][col];
                    continue;
                }
                int ans = 0;
                if(row+1 < n){
                   ans = Math.max(ans,dp[row+1][col+1]);             
                }
                ans = Math.max(ans,dp[row][col+1]);
                if(row-1 >= 0){
                   ans = Math.max(ans,dp[row-1][col+1]);             
                }
                dp[row][col] = ans + gold[row][col];
            }
        }
        int sol = Integer.MIN_VALUE;
        for(int i=0;i<n;i++){
           sol = Math.max(sol,dp[i][0]);
        }
        System.out.println(sol);


    }

}