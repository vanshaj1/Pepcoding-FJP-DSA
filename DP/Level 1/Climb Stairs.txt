Climb Stairs
Easy

1. You are given a number n, representing the number of stairs in a staircase.
2. You are on the 0th step and are required to climb to the top.
3. In one move, you are allowed to climb 1, 2 or 3 stairs.
4. You are required to print the number of different paths via which you can climb to the top.

Constraints
0 = n = 20

Format
Input
A number n

Output
A number representing the number of ways to climb the stairs from 0 to top.

Example
Sample Input

4

Sample Output
7




`````````````````````````````Code```````````````````````````````````


Approach 1


import java.io.*;
import java.util.*;

public class Main {
    public static int printWaysByRecurr(int idx,int n){
        if(idx == n){
            return 1;
        }
        int ans = 0;
        if(idx +1 <= n){
             ans+= printWaysByRecurr(idx,n-1);
        }
         if(idx +2 <= n){
            ans+=  printWaysByRecurr(idx,n-2);
        }
         if(idx +1 <= n){
             ans+= printWaysByRecurr(idx,n-3);
        }
       
        
        
        return ans;
    }
    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        System.out.println(printWaysByRecurr(0,n));
    }

}




Approach 2


import java.io.*;
import java.util.*;

public class Main {
    // public static int printWaysByRecurr(int idx,int n){
    //     if(idx == n){
    //         return 1;
    //     }
    //     int ans = 0;
    //     if(idx +1 <= n){
    //          ans+= printWaysByRecurr(idx,n-1);
    //     }
    //      if(idx +2 <= n){
    //         ans+=  printWaysByRecurr(idx,n-2);
    //     }
    //      if(idx +1 <= n){
    //          ans+= printWaysByRecurr(idx,n-3);
    //     }
       
        
        
    //     return ans;
    // }
    public static int printWaysByMemo(int idx,int n,int[] dp){
        if(idx == n){
            return dp[idx] = 1;
        }
        if(dp[idx] != -1){
            return dp[idx];
        }
        int ans = 0;
        if(idx +1 <= n){
             ans+= printWaysByMemo(idx+1,n,dp);
        }
         if(idx +2 <= n){
            ans+=  printWaysByMemo(idx+2,n,dp);
        }
         if(idx +3 <= n){
             ans+= printWaysByMemo(idx+3,n,dp);
        }
       
        
        
        return dp[idx] = ans;
    }
    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        // System.out.println(printWaysByRecurr(0,n));
        int[] dp = new int[n+1];
        Arrays.fill(dp,-1);
        System.out.println(printWaysByMemo(0,n,dp));
    }

}




Approach 3


import java.io.*;
import java.util.*;

public class Main {
    // public static int printWaysByRecurr(int idx,int n){
    //     if(idx == n){
    //         return 1;
    //     }
    //     int ans = 0;
    //     if(idx +1 <= n){
    //          ans+= printWaysByRecurr(idx,n-1);
    //     }
    //      if(idx +2 <= n){
    //         ans+=  printWaysByRecurr(idx,n-2);
    //     }
    //      if(idx +1 <= n){
    //          ans+= printWaysByRecurr(idx,n-3);
    //     }
       
        
        
    //     return ans;
    // }
    // public static int printWaysByMemo(int idx,int n,int[] dp){
    //     if(idx == n){
    //         return dp[idx] = 1;
    //     }
    //     if(dp[idx] != -1){
    //         return dp[idx];
    //     }
    //     int ans = 0;
    //     if(idx +1 <= n){
    //          ans+= printWaysByMemo(idx+1,n,dp);
    //     }
    //      if(idx +2 <= n){
    //         ans+=  printWaysByMemo(idx+2,n,dp);
    //     }
    //      if(idx +3 <= n){
    //          ans+= printWaysByMemo(idx+3,n,dp);
    //     }
       
        
        
    //     return dp[idx] = ans;
    // }
        public static int printWaysByMemo(int idx,int n,int[] dp){
        if(idx == n){
            return dp[idx] = 1;
        }
        if(dp[idx] != -1){
            return dp[idx];
        }
        int ans = 0;
        if(idx +1 <= n){
             ans+= printWaysByMemo(idx+1,n,dp);
        }
         if(idx +2 <= n){
            ans+=  printWaysByMemo(idx+2,n,dp);
        }
         if(idx +3 <= n){
             ans+= printWaysByMemo(idx+3,n,dp);
        }
       
        
        
        return dp[idx] = ans;
    }
    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        // System.out.println(printWaysByRecurr(0,n));
        // int[] dp = new int[n+1];
        // Arrays.fill(dp,-1);
        // System.out.println(printWaysByMemo(0,n,dp));
        int[] dp = new int[n+1];
        for(int i=n;i>=0;i--){
             if(i == n){
                dp[i] = 1;
                continue;
            }
            int ans = 0;
            if(i +1 <= n){
                ans+=  dp[i+1];
            }
            if(i +2 <= n){
                ans+=  dp[i+2];
            }
            if(i +3 <= n){
                ans+=dp[i+3];
            }
            dp[i] = ans;
        
        }  
            
            System.out.println(dp[0]);
            
    }

}


Approach  4


import java.io.*;
import java.util.*;

public class Main {
    // public static int printWaysByRecurr(int idx,int n){
    //     if(idx == n){
    //         return 1;
    //     }
    //     int ans = 0;
    //     if(idx +1 <= n){
    //          ans+= printWaysByRecurr(idx,n-1);
    //     }
    //      if(idx +2 <= n){
    //         ans+=  printWaysByRecurr(idx,n-2);
    //     }
    //      if(idx +1 <= n){
    //          ans+= printWaysByRecurr(idx,n-3);
    //     }
       
        
        
    //     return ans;
    // }
    // public static int printWaysByMemo(int idx,int n,int[] dp){
    //     if(idx == n){
    //         return dp[idx] = 1;
    //     }
    //     if(dp[idx] != -1){
    //         return dp[idx];
    //     }
    //     int ans = 0;
    //     if(idx +1 <= n){
    //          ans+= printWaysByMemo(idx+1,n,dp);
    //     }
    //      if(idx +2 <= n){
    //         ans+=  printWaysByMemo(idx+2,n,dp);
    //     }
    //      if(idx +3 <= n){
    //          ans+= printWaysByMemo(idx+3,n,dp);
    //     }
       
        
        
    //     return dp[idx] = ans;
    // }
    //     public static int printWaysByMemo(int idx,int n,int[] dp){
    //     if(idx == n){
    //         return dp[idx] = 1;
    //     }
    //     if(dp[idx] != -1){
    //         return dp[idx];
    //     }
    //     int ans = 0;
    //     if(idx +1 <= n){
    //          ans+= printWaysByMemo(idx+1,n,dp);
    //     }
    //      if(idx +2 <= n){
    //         ans+=  printWaysByMemo(idx+2,n,dp);
    //     }
    //      if(idx +3 <= n){
    //          ans+= printWaysByMemo(idx+3,n,dp);
    //     }
       
        
        
    //     return dp[idx] = ans;
    // }
    public static int rec(int idx,int n){
        if(idx == n){
            return 1;
        }
        if(idx > n){
            return 0;
        }
        int ans = 0;
        for(int i=1;i<=3;i++){
            ans += rec(idx + i,n);
        }
        return ans;
    }
    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        // System.out.println(printWaysByRecurr(0,n));
        // int[] dp = new int[n+1];
        // Arrays.fill(dp,-1);
        // System.out.println(printWaysByMemo(0,n,dp));
        // int[] dp = new int[n+1];
        // for(int i=n;i>=0;i--){
        //      if(i == n){
        //         dp[i] = 1;
        //         continue;
        //     }
        //     int ans = 0;
        //     if(i +1 <= n){
        //         ans+=  dp[i+1];
        //     }
        //     if(i +2 <= n){
        //         ans+=  dp[i+2];
        //     }
        //     if(i +3 <= n){
        //         ans+=dp[i+3];
        //     }
        //     dp[i] = ans;
        
        // }  
            
        //     System.out.println(dp[0]);

        System.out.println(rec(0,n));
            
    }

}