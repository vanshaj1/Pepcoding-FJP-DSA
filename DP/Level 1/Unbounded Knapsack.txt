Unbounded Knapsack
Easy

1. You are given a number n, representing the count of items.
2. You are given n numbers, representing the values of n items.
3. You are given n numbers, representing the weights of n items.
3. You are given a number cap, which is the capacity of a bag you've.
4. You are required to calculate and print the maximum value that can be created in the bag without 
    overflowing it's capacity.
Note - Each item can be taken any number of times. You are allowed to put the same item again 
                  and again.

Constraints
1 = n = 20
0 = v1, v2, .. n elements = 50
0  w1, w2, .. n elements = 10
0  cap = 10

Format
Input
A number n
v1 v2 .. n number of elements
w1 w2 .. n number of elements
A number cap

Output
A number representing the maximum value that can be created in the bag without overflowing it's capacity

Example
Sample Input

5
15 14 10 45 30
2 5 1 3 4
7

Sample Output
100




`````````````````````````````````Code```````````````````````````````

Appraoch 1


import java.io.*;
	import java.util.*;

	public class Main {
	public static int unboundedKnapsackWithRecurr(int n,int idx , int[] values, int[] weight,int cap){
		if(idx == n || cap == 0){
            return 0;
        }
        int inc = 0,exc = 0;   
        if(weight[idx] <= cap){
             inc = unboundedKnapsackWithRecurr(n,idx,values,weight,cap - weight[idx]) + values[idx];
        }
        exc = unboundedKnapsackWithRecurr(n,idx + 1,values,weight,cap);
        return Math.max(inc,exc);
	}
	public static int unboundedKnapsackWithMemo(int n,int idx , int[] values, int[] weight,int cap,int[][] dp){
		if(idx == n || cap == 0){
            return dp[idx][cap] = 0;
        }
		if(dp[idx][cap] != 0){
			return dp[idx][cap];
		}
        int inc = 0,exc = 0;   
        if(weight[idx] <= cap){
             inc = unboundedKnapsackWithMemo(n,idx,values,weight,cap - weight[idx],dp) + values[idx];
        }
        exc = unboundedKnapsackWithMemo(n,idx + 1,values,weight,cap,dp);
        return dp[idx][cap] = Math.max(inc,exc);
	}
	    public static void main(String[] args) throws Exception {
			Scanner scn = new Scanner(System.in);
			int n = scn.nextInt();
			int[] values = new int[n];
			int[] weights = new int[n];
			for(int i=0;i<values.length;i++){
				values[i] = scn.nextInt();
			}
			for(int i=0;i<weights.length;i++){
				weights[i] = scn.nextInt();
			}
			int cap = scn.nextInt();
			// System.out.println(unboundedKnapsackWithRecurr(n,0,values,weights,cap));
			int[][] dp = new int[n+1][cap+1];
			System.out.println(unboundedKnapsackWithMemo(n,0,values,weights,cap,dp));

		}
	}









Appraoch 2

import java.io.*;
	import java.util.*;

	public class Main {
	public static int unboundedKnapsackWithRecurr(int n,int idx , int[] values, int[] weight,int cap){
		if(idx == n || cap == 0){
            return 0;
        }
        int inc = 0,exc = 0;   
        if(weight[idx] <= cap){
             inc = unboundedKnapsackWithRecurr(n,idx,values,weight,cap - weight[idx]) + values[idx];
        }
        exc = unboundedKnapsackWithRecurr(n,idx + 1,values,weight,cap);
        return Math.max(inc,exc);
	}
	public static int unboundedKnapsackWithMemo(int n,int idx , int[] values, int[] weight,int cap,int[][] dp){
		if(idx == n || cap == 0){
            return dp[idx][cap] = 0;
        }
		if(dp[idx][cap] != 0){
			return dp[idx][cap];
		}
        int inc = 0,exc = 0;   
        if(weight[idx] <= cap){
             inc = unboundedKnapsackWithMemo(n,idx,values,weight,cap - weight[idx],dp) + values[idx];
        }
        exc = unboundedKnapsackWithMemo(n,idx + 1,values,weight,cap,dp);
        return dp[idx][cap] = Math.max(inc,exc);
	}
	    public static void main(String[] args) throws Exception {
			Scanner scn = new Scanner(System.in);
			int n = scn.nextInt();
			int[] values = new int[n];
			int[] weights = new int[n];
			for(int i=0;i<values.length;i++){
				values[i] = scn.nextInt();
			}
			for(int i=0;i<weights.length;i++){
				weights[i] = scn.nextInt();
			}
			int cap = scn.nextInt();
			// System.out.println(unboundedKnapsackWithRecurr(n,0,values,weights,cap));
			int[][] dp = new int[n+1][cap+1];
			// System.out.println(unboundedKnapsackWithMemo(n,0,values,weights,cap,dp));
			for(int idx=n;idx>=0;idx--){
				for(int c=0;c<=cap;c++){
					if(idx == n || c == 0){
						dp[idx][c] = 0;
						continue;
					}
					int inc = 0,exc = 0;   
					if(weights[idx] <= c){
						inc = dp[idx][c - weights[idx]] + values[idx];
					}
					exc = dp[idx + 1][c];
					dp[idx][c] = Math.max(inc,exc);
				}
			}
			System.out.println(dp[0][cap]);
		}
	}