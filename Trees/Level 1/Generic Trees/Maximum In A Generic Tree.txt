Maximum In A Generic Tree
Easy

1. You are given a partially written GenericTree class. 2. You are required to complete the body of max function. The function is expected to find the node with maximum value and return it. 3. Input and Output is managed for you.


Constraints
None


Format
Input
Input is managed for you


Output
Output is managed for you


Example
Sample Input

12
10 20 -1 30 50 -1 60 -1 -1 40 -1 -1

Sample Output
60




```````````````````````````````````````````````````````````````````````````

import java.io.*;
import java.util.*;

public class Main {
  private static class Node {
    int data;
    ArrayList<Node> children = new ArrayList<>();
  }

  public static void display(Node node) {
   String output = node.data + " -> ";
   for(Node child : node.children){
      output += child.data + ", ";
   }
   output += ".";
   System.out.println(output);
   for(Node child : node.children){
      display(child);
   
   }
  }

  public static Node construct(int[] arr) {
    Node root = null;
    Stack<Node> stk = new Stack<>();
    for(int i=0;i<arr.length;i++){
        if(arr[i] == -1){
          stk.pop();
        }else{
              Node curr = new Node();
              curr.data = arr[i];
              if(stk.size() == 0){
                root = curr;
              }else{
                stk.peek().children.add(curr);
              }
              stk.push(curr);
          }
    }
    return root;
  }
  public static int size(Node node) {
    int s = 0;

    for (Node child : node.children) {
      s += size(child);
    }
    s += 1;

    return s;
  }

  public static int max(Node node) {
    int max = node.data;
    //faith
    for(Node child : node.children){
      max = Math.max(max , max(child));
    }
    return max;
  }

  public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    int n = Integer.parseInt(br.readLine());
    int[] arr = new int[n];
    String[] values = br.readLine().split(" ");
    for (int i = 0; i < n; i++) {
      arr[i] = Integer.parseInt(values[i]);
    }

    Node root = construct(arr);
    int m = max(root);
    System.out.println(m);
    // display(root);
  }

}