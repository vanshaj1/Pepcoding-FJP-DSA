Balanced Brackets
Easy

1. You are given a string exp representing an expression.
2. You are required to check if the expression is balanced i.e. closing brackets and opening brackets match up well.

e.g.
[(a + b) + {(c + d) * (e / f)}] -> true
[(a + b) + {(c + d) * (e / f)]} -> false
[(a + b) + {(c + d) * (e / f)} -> false
([(a + b) + {(c + d) * (e / f)}] -> false

Constraints
0 <= str.length <= 100

Format
Input
A string str

Output
true or false

Example
Sample Input

[(a + b) + {(c + d) * (e / f)}]

Sample Output
true


````````````````````````````````Code````````````````````````````````

import java.io.*;
import java.util.*;

public class Main {
   public static boolean isValid(String str){
      Stack<Character> stk = new Stack();
      for(int i=0;i<str.length();i++){
         if(str.charAt(i) == ']'){
            if(stk.isEmpty() || stk.peek() != '['){
               return false;
            }
            stk.pop();
         }else if(str.charAt(i) == '}'){
            if(stk.isEmpty() || stk.peek() != '{'){
               return false;
            }
            stk.pop();
         }else if(str.charAt(i) == ')'){
            if(stk.isEmpty() || stk.peek() != '('){
               return false;
            }
            stk.pop();
         }else if(str.charAt(i) == '[' || str.charAt(i) == '{' || str.charAt(i) == '('){
               stk.push(str.charAt(i));
         }
      }
      if(!stk.isEmpty()){
         return false;
      }
      return true;
   }

    public static void main(String[] args) throws Exception {
        Stack<Integer> stk = new Stack<>();
        Scanner scn = new Scanner(System.in);
        String str = scn.nextLine();
        System.out.println(isValid(str));

    }

}