K Largest Elements
Easy

1. You will be given an Array with its length
 2. You will also be given an integral value k
 3. You need to find k largest elements from the given array
 4. Input is handled for you
 5. It is a functional problem ,please do not modify main()

Constraints
1 = N = 100
 K = N
 -1000 = C[i] = 1000

Format
Input
Input is handled for you

Output
Output MUST be in descending order

Example
Sample Input

8
44 -5 -2 41 12 19 21 -6 
2

Sample Output
44 41




```````````````````````````````Code``````````````````````````
Approach 1

import java.util.*;
 import java.lang.*;
 import java.io.*;
 class Main
  {
 	 public static void main (String[] args) throws IOException
 	  {
 	 	 Scanner scn= new Scanner(System.in);
 	    	 int n = scn.nextInt();
 	 	 int[] num = new int[n];
 	 	 for (int i = 0; i < n; i++) {
 	 	 	 	 num[i] = scn.nextInt();
 	 	 	 }
 	 	 int k = scn.nextInt();
 	 	 solve(n,num,k);
 	  }
 	 // -----------------------------------------------------
 	 // This is a functional problem. Only this function has to be written.
 	 // This function takes as input an array,n length of array and k.
 	 // It should print required output.
 	  public static void solve(int n,int[] arr,int k){
	  PriorityQueue<Integer> pq = new PriorityQueue();
		for(int i=0;i<n;i++){
			pq.add(arr[i]);
		}
		for(int i=1;i<=n-k;i++){
			pq.remove();
		}
		Stack<Integer> stk = new Stack();
		while(!pq.isEmpty()){
			stk.push(pq.remove());
		}
		while(!stk.isEmpty()){
			System.out.print(stk.pop() + " ");
		}
     }
 }




Approach 2

import java.util.*;
 import java.lang.*;
 import java.io.*;
 class Main
  {
 	 public static void main (String[] args) throws IOException
 	  {
 	 	 Scanner scn= new Scanner(System.in);
 	    	 int n = scn.nextInt();
 	 	 int[] num = new int[n];
 	 	 for (int i = 0; i < n; i++) {
 	 	 	 	 num[i] = scn.nextInt();
 	 	 	 }
 	 	 int k = scn.nextInt();
 	 	 solve(n,num,k);
 	  }
 	 // -----------------------------------------------------
 	 // This is a functional problem. Only this function has to be written.
 	 // This function takes as input an array,n length of array and k.
 	 // It should print required output.
 	  public static void solve(int n,int[] arr,int k){
	  PriorityQueue<Integer> pq = new PriorityQueue(Collections.reverseOrder());
		for(int i=0;i<n;i++){
			pq.add(arr[i]);
		}
		int i = 0;
		while(i != k){
			System.out.print(pq.remove() + " ");
			i++;
		}
     }
 }





Approach 3

import java.util.*;
 import java.lang.*;
 import java.io.*;
 class Main
  {
 	 public static void main (String[] args) throws IOException
 	  {
 	 	 Scanner scn= new Scanner(System.in);
 	    	 int n = scn.nextInt();
 	 	 int[] num = new int[n];
 	 	 for (int i = 0; i < n; i++) {
 	 	 	 	 num[i] = scn.nextInt();
 	 	 	 }
 	 	 int k = scn.nextInt();
 	 	 solve(n,num,k);
 	  }
 	 // -----------------------------------------------------
 	 // This is a functional problem. Only this function has to be written.
 	 // This function takes as input an array,n length of array and k.
 	 // It should print required output.
 	  public static void solve(int n,int[] arr,int k){
	  PriorityQueue<Integer> pq = new PriorityQueue(Collections.reverseOrder());
		Arrays.sort(arr);
		for(int i=n-1;i>=n-k;i--){
			pq.add(arr[i]);
		}
		int i = 0;
		while(i != k){
			System.out.print(pq.remove() + " ");
			i++;
		}
     }
 }