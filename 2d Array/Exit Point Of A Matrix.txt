Exit Point Of A Matrix
Easy

1. You are given a number n, representing the number of rows.
2. You are given a number m, representing the number of columns.
3. You are given n*m numbers (1's and 0's), representing elements of 2d array a.
4. Consider this array a maze and a player enters from top-left corner in east direction.
5. The player moves in the same direction as long as he meets '0'. On seeing a 1, he takes a 90 deg right turn.
6. You are required to print the indices in (row, col) format of the point from where you exit the matrix.

Constraints
1 <= n <= 10^2
1 <= m <= 10^2
e1, e2, .. n * m elements belongs to the set (0, 1)

Format
Input
A number n
A number m
e11
e12..
e21
e22..
.. n * m number of elements

Output
row
col (of the point of exit)

Example
Sample Input

4
4
0
0
1
0
1
0
0
0
0
0
0
0
1
0
1
0

Sample Output
1
3



```````````````````````````````Code``````````````````````````````````


import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int m = scn.nextInt();
        int[][] arr = new int[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
               arr[i][j] = scn.nextInt();
            }
        }
        int direction = 0;
        int colstart = 0;
        int rowstart = 0;
        int investigatorRowPoint = 0;
        int investigatorColPoint = 0;
        while(rowstart <= n-1 && colstart <= m-1){
            if(arr[rowstart][colstart] == 1){
                direction = (direction+1) % 4;
            }
           investigatorRowPoint = rowstart;
           investigatorColPoint = colstart;
           if(direction == 0){
               colstart++;
           }
            if(direction == 1){
               rowstart++;
           }
            if(direction == 2){
               colstart--;
           }
            if(direction == 3){
               rowstart--;
           }
        }
        System.out.println(investigatorRowPoint);
        System.out.println(investigatorColPoint);
    }

}