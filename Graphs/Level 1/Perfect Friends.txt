Perfect Friends
Easy

1. You are given a number n (representing the number of students). Each student will have an id 
     from 0 to n - 1.
2. You are given a number k (representing the number of clubs)
3. In the next k lines, two numbers are given separated by a space. The numbers are ids of 
     students belonging to same club.
4. You have to find in how many ways can we select a pair of students such that both students are 
     from different clubs.

Constraints
None

Format
Input
Input has been managed for you

Output
Check the sample output

Example
Sample Input

7
5
0 1
2 3
4 5
5 6
4 6

Sample Output
16



`````````````````````````````````Code````````````````````````



import java.io.*;
import java.util.*;

public class Main {
   
   static class Edge{
      int src;
      int nbr;
      Edge(int src,int nbr){
         this.src = src;
         this.nbr = nbr;
      }
   }
   public static void dfs(ArrayList<Edge>[] graph,boolean[] vis,int src,ArrayList<Integer> pair){
      pair.add(src);
      vis[src] = true;
      for(Edge e: graph[src]){
         if(vis[e.nbr] == false){
            dfs(graph,vis,e.nbr,pair);
         }
      }
   }
   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

      int n = Integer.parseInt(br.readLine());
      int k = Integer.parseInt(br.readLine());
      
      // write your code here
      Scanner scn = new Scanner(System.in);
      ArrayList<Edge>[] graph = new ArrayList[n];
       for(int i = 0; i < n; i++){
         graph[i] = new ArrayList<>();
      }
      for(int i=0;i<k;i++){
         String[] parts = br.readLine().split(" ");
         int id1 = Integer.parseInt(parts[0]);
         int id2 = Integer.parseInt(parts[1]);
         graph[id1].add(new Edge(id1,id2));
         graph[id2].add(new Edge(id2,id1));
      }
      boolean[] vis = new boolean[n];
      ArrayList<ArrayList<Integer>> pairs = new ArrayList<ArrayList<Integer>>();
      for(int i=0;i<n;i++){
         if(vis[i] == false){
            ArrayList<Integer> pair = new ArrayList<Integer>();
            dfs(graph,vis,i,pair);
            pairs.add(pair);
         }
      }
      // System.out.println(pairs);
      int ways = 0;
      for(int i=0;i<pairs.size();i++){
         for(int j = i+1;j<pairs.size();j++){
            ways += pairs.get(i).size() * pairs.get(j).size(); 
         }
      }
       System.out.println(ways);
   }

}