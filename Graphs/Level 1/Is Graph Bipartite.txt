Is Graph Bipartite
Easy

1. You are given a graph.
2. You are required to find and print if the graph is bipartite

Note - A graph is called bipartite if it is possible to split it's vertices in two sets of mutually 
               exclusive and exhaustive vertices such that all edges are across sets.

Constraints
None

Format
Input
Input has been managed for you

Output
true if the graph is bipartite, false otherwise

Example
Sample Input

7
8
0 1 10
1 2 10
2 3 10
0 3 10
3 4 10
4 5 10
5 6 10
4 6 10

Sample Output
false


`````````````````````````````````Code````````````````````````


import java.io.*;
import java.util.*;

public class Main {
   static class Edge {
      int src;
      int nbr;
      int wt;

      Edge(int src, int nbr, int wt) {
         this.src = src;
         this.nbr = nbr;
         this.wt = wt;
      }
   }
   static class pair{
      int src;
      int level;
      pair(int src,int level){
         this.src = src;
         this.level = level;
      }
   }
   public static boolean isOddCycle(ArrayList<Edge>[] graph,int src,int[] vis){
      Queue<pair> q = new ArrayDeque();
      q.add(new pair(src,1));
      while(!q.isEmpty()){
         pair sp = q.remove();
         if(vis[sp.src] > -1){
            if(vis[sp.src] + sp.level % 2 != 0){
               return true;
            }
            continue;
         }
         vis[sp.src] = sp.level;
         for(Edge e: graph[sp.src]){
            if(vis[e.nbr] == -1){
               q.add(new pair(e.nbr,sp.level+1));
            }
         }
      }
      return false;
   }
   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

      int vtces = Integer.parseInt(br.readLine());
      ArrayList<Edge>[] graph = new ArrayList[vtces];
      for (int i = 0; i < vtces; i++) {
         graph[i] = new ArrayList<>();
      }

      int edges = Integer.parseInt(br.readLine());
      for (int i = 0; i < edges; i++) {
         String[] parts = br.readLine().split(" ");
         int v1 = Integer.parseInt(parts[0]);
         int v2 = Integer.parseInt(parts[1]);
         int wt = Integer.parseInt(parts[2]);
         graph[v1].add(new Edge(v1, v2, wt));
         graph[v2].add(new Edge(v2, v1, wt));
      }

      // write your code here
      int[] vis = new int[vtces];
      Arrays.fill(vis,-1);
      for(int i=0;i<vtces;i++){
         if(vis[i] == -1){
            if(isOddCycle(graph,i,vis)){
               System.out.println(false);
               return;
            }
         }
      }
      System.out.println(true);
   }
}