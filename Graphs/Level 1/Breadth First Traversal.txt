Breadth First Traversal
Easy

1. You are given a graph, and a src vertex.
2. You are required to do a breadth first traversal and print which vertex is reached via which path, 
     starting from the src.

Note - for output, check the sample output and question video.

Constraints
None

Format
Input
Input has been managed for you

Output
Check the sample output

Example
Sample Input

7
8
0 1 10
1 2 10
2 3 10
0 3 10
3 4 10
4 5 10
5 6 10
4 6 10
2

Sample Output
2@2
1@21
3@23
0@210
4@234
5@2345
6@2346


``````````````````````````````Code```````````````````````````

import java.io.*;
import java.util.*;

public class Main {
   static class Edge {
      int src;
      int nbr;

      Edge(int src, int nbr) {
         this.src = src;
         this.nbr = nbr;
      }
   }
   static class pair{
      int src = 0;
      String psf;
      pair(){

      }
      pair(int src,String psf){
         this.src = src;
         this.psf = psf;
      }
   } 
   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

      int vtces = Integer.parseInt(br.readLine());
      ArrayList<Edge>[] graph = new ArrayList[vtces];
      for (int i = 0; i < vtces; i++) {
         graph[i] = new ArrayList<>();
      }

      int edges = Integer.parseInt(br.readLine());
      for (int i = 0; i < edges; i++) {
         String[] parts = br.readLine().split(" ");
         int v1 = Integer.parseInt(parts[0]);
         int v2 = Integer.parseInt(parts[1]);
         graph[v1].add(new Edge(v1, v2));
         graph[v2].add(new Edge(v2, v1));
      }

      int src = Integer.parseInt(br.readLine());

      // write your code here 
      Queue<pair> q = new ArrayDeque();
      q.add(new pair(src,src + ""));
      boolean[] vis = new boolean[vtces];
      while(!q.isEmpty()){
         pair sp = q.remove();
         if(vis[sp.src] == true){
            continue;
         }
         vis[sp.src] = true;
         System.out.println(sp.src + "@"+ sp.psf );
         for(Edge e : graph[sp.src]){
            if(vis[e.nbr] == false)
                q.add(new pair(e.nbr,sp.psf + e.nbr));
         }
      }
   }
}