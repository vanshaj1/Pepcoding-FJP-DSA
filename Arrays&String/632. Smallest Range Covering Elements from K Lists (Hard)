https://leetcode.com/problems/smallest-range-covering-elements-from-k-lists/

class Solution {
    public int[] smallestRange(List<List<Integer>> nums) {
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        int max = Integer.MIN_VALUE;
        for(int i=0;i<nums.size();i++){
            pq.add(new Pair(i,0,nums.get(i).get(0)));
            max = Math.max(max,nums.get(i).get(0));
        }
        int rsize = Integer.MAX_VALUE;
        int rstart = 0;
        int rend = 0;
        while(pq.size() == nums.size()){
            Pair r = pq.remove();
            int crsize = max - r.val;
            if(crsize < rsize){
                rsize = crsize;
                rstart = r.val;
                rend = max;
            }
            
            if(r.di + 1 < nums.get(r.li).size()){
                max = Math.max(max,nums.get(r.li).get(r.di+1));
                pq.add(new Pair(r.li,r.di+1,nums.get(r.li).get(r.di+1)));
            }
        }
        return new int[]{rstart,rend};
        
    }
    static class Pair implements Comparable<Pair>{
        int li;
        int di;
        int val;
        
        Pair(int li,int di,int val){
            this.li = li;
            this.di = di;
            this.val = val;
        }
        public int compareTo(Pair o){
            return this.val - o.val;
        }
    }
}
